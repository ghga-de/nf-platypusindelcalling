/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run main.nf -profile dkfz_cluster,singularity --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_contact     = 'Kübra Narcı kuebra.narci@dkfz-heidelberg.de'
    config_profile_name        = 'Test profile for DKFZ cluster'
    config_profile_description = 'Test dataset for to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 30
    max_memory = '250.GB'
    max_time   = '48.h'

    // Input data
    input  = 'assets/samplesheet_cluster.csv'

    // workflow parameters
    outdir                     = "results"

    // Post Processes
    runIndelAnnotation         = true
    runIndelDeepAnnotation     = true
    runIndelVCFFilter          = true
    runTinda                   = true
    skip_multiqc               = false

    // Annovar 
    // Annovar needs to be build locally
    buildver                   = "hg38"
    dbtype                     = "wgEncodeGencodeCompV39"
    segdupcol                  = "SEGDUP"
    cytobandcol                = "CYTOBAND"
    geneannocols               = '"ANNOVAR_FUNCTION,GENE,EXONIC_CLASSIFICATION,ANNOVAR_TRANSCRIPTS"'
    annovar_path               = "/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38/databases/ANNOVAR/annovar_Sept2022"

    // runtinda options
    seqtype                    = "WGS"

    // Reference Files //
    data_path                  = "/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38"
    ref_type                   = "hg38" 
    reference                  = null
    genome                     = 'genome.fa'
    fasta                      = 'genome.fa'

      // Annotation files
    k_genome                   ="${params.data_path}/databases/1000Genome/hg38/ALL.wgs.shapeit2_integrated_snvindels_v2a.GRCh38.27022019.sites.vcf.gz"
    dbsnp_indel                ="${params.data_path}/databases/dbSNP/dbSNP_151_GRCh38.p7/00-All_v151_GRCh38.INDEL.vcf.gz"
    local_control_wgs          ="${params.data_path}/databases/LocalControls/ExclusionList_2022/MPsnvs_PLindels/hg38_medullo_platypus_indel_dev_hg38_alt_calling_AF0.05.vcf.gz"
    local_control_wes          ="${params.data_path}/databases/LocalControls/ExclusionList_2019_liftover/MPsnvs_PLindels/GRCh38_ExclusionList_2019_H021_MP_PL_WES.INDELs.AFgt1.vcf.gz"   
    gnomad_genomes             ="${params.data_path}/databases/gnomAD/v3/genomes/gnomad.genomes.r3.0.sites.INDEL.vcf.gz"
    gnomad_exomes              ="${params.data_path}/databases/gnomAD/v2.1.1/exomes_liftover_grch38/gnomad.exomes.r2.1.1.sites.liftover_grch38.INDEL.vcf.gz"

    // INDEL reability files
    mapability_file            ="${params.data_path}/databases/mappability/GRCh38_Mappability_Align_100mer.bedGraph.gz"
    repeat_masker              ="${params.data_path}/databases/UCSC/repeatMasker/2019-08-14_RepeatMasker_Human_hg38.sorted_plain.bed.gz"
    simple_tandemrepeats       ="${params.data_path}/databases/UCSC/simple_tandem_repeats/2019-08-15_SimpleTandemRepeats_Human_hg38.sorted_plain.bed.gz"

    // Deep Annotation files
    cpgislands_file            ="${params.data_path}/databases/UCSC/cpg_islands/2019-08-15_CpG_Islands_Human_hg38.sorted_plain.bed.gz"
    encode_dnase_file          ="${params.data_path}/databases/UCSC/DNAase/2019-08-15_Encode_DNAase_clusters_Human_hg38.sorted_plain.bed.gz"
    mirbase_file               ="${params.data_path}/databases/miRNA/miRBase_version-22_hg38.sorted_plain.bed.gz"
    cosmic_file                ="${params.data_path}/databases/COSMIC/cosmic_v81/Cosmic_v81_hg38_all.coding_snvs.bed.gz"
    encode_tfbs_file           ="${params.data_path}/databases/UCSC/TF_clusters/2019-08-15_Encode_TF_clusters_Human_hg38.sorted_plain.bed.gz"
    enchancer_file             ="${params.data_path}/databases/enhancers/FANTOM5/F5.hg38.enhancers.sorted_plain.bed.gz"
    mirna_sncrnas_file         ="${params.data_path}/databases/miRNA/dashr.v2.sncRNA.annotation.hg38.sncType.sorted_plain.bed.gz"

    // TiNDA files
    local_control_platypus_wgs ="${params.data_path}/databases/LocalControls/ExclusionList_2019_liftover/PLsnvs_PLindels/GRCh38_ExclusionList_2019_HIPO-PCAWG_PL_WGS.SNVs-INDELs.AFgt1.vcf.gz"
    local_control_platypus_wes ="${params.data_path}/databases/LocalControls/ExclusionList_2019_liftover/PLsnvs_PLindels/GRCh38_ExclusionList_2019_H021_PL_WES.SNVs-INDELs.AFgt1.vcf.gz"
    genemodel_bed              ="${params.data_path}/databases/gencode/gencode39/gencode.v39.annotation.gene.bed"
}


// Perform work directory cleanup when the run has succesfully completed
 cleanup = true

// Reduce the job submit rate to about 5 per second, this way the server won't be bombarded with jobs
executor {
    submitRateLimit = '3 sec'
}

singularity {
  enabled = true
  autoMounts = true
}
env {
    SINGULARITY_CACHEDIR="/omics/groups/OE0246/shared/nf_cache_dir"
    SINGULARITY_LIBRARYDIR="/omics/groups/OE0608/internal/kubran/singularity/library"
}

process {
  executor = 'lsf'
  scratch = '$SCRATCHDIR/$LSB_JOBID'

}
executor {
  name = 'lsf'
  perTaskReserve = false
  perJobMemLimit = true
  queueSize = 10
  }
