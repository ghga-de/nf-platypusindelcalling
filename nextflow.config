/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-platypusindelcalling Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null

    // workflow parameters
    outdir                     = '/omics/groups/OE0608/internal/kubran/results'


    // Post Processes
    runIndelAnnotation         = true
    runIndelDeepAnnotation     = true
    runIndelVCFFilter          = true
    runTinda                   = true
    skip_multiqc               = false

    // depends on reference control !! this wont be default instead will be controled by ref type
    chr_prefix                 ='chr'
    chr_suffix                 =''

    //Platypus options
    optimized                  = " --genIndels=1 --genSNPs=1 --verbosity=1 --bufferSize=100000 --maxReads=5000000 --minFlank=0"

    // Annotate Table options
    padding                    = 10
    minoverlapfraction         = 0.7
    maxborderdist              = 20
    maxmatches                 = 5

    // Annovar

    // only option is hg19 now!

    buildver                   = 'hg19'
    dbtype                     = 'wgEncodeGencodeCompV19'
    segdupcol                  = '"SEGDUP"'
    cytobandcol                = '"CYTOBAND"'
    geneannocols               = '"ANNOVAR_FUNCTION,GENE,EXONIC_CLASSIFICATION,ANNOVAR_TRANSCRIPTS"'

    // confidence annotation options
    confidence_opts_indel      = ""

    // filtering options: only if there is no control these filtering measures will be applied
    filter_recurrance          = false
    crit_exac_maxmaf           = 1
    crit_evs_maxmaf            = 1
    crit_gnomad_exomes_maxmaf  = 0.001
    crit_gnomad_genomes_maxmaf = 0.001
    crit_1kgenomes_maxmaf      = 0.01
    crit_recurrance            = 7
    crit_localcontrol_maxmaf   = 0.01
    min_confidence_score       = 8
    add_filter_opt             = "''"

    // screenshot options
    max_var_screenshots        = 0
    window_size                = 100
    repeat_masker              = ''

    // runtinda options
    normal_header_pattern      = 'control'
    tumor_header_pattern       = 'tumor'
    seqtype                    = 'WES'
    right_border               = 0.45
    bottom_border              = 0.01
    maf_threshold              = 0.001


    // Files //
    db_base_dir                ='/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg19_GRCh37_1000genomes/databases'
    reference                  ='/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg19_GRCh37_1000genomes/sequence/1KGRef_Phix/hs37d5_PhiX.fa'

    // Annotation files
    k_genome                   ='${params.db_base_dir}/1000genomes/ALL.wgs.phase1_integrated_calls.20101123.indels_plain.vcf.gz'
    dbsnp_indel                ='${params.db_base_dir}/dbSNP/dbSNP_147/00-All.INDEL.vcf.gz'
    dbsnp_snv                  ='${params.db_base_dir}/dbSNP/dbSNP_147/00-All.SNV.vcf.gz'
    exac_file                  ='${params.db_base_dir}/ExAC/ExAC_nonTCGA.r0.3.1.sites.vep.vcf.gz'
    evs_file                   ='${params.db_base_dir}/EVS/ESP6500SI-V2-SSA137.updatedProteinHgvs.ALL.snps_indels.vcf.gz'
    local_control_wgs          ='${params.db_base_dir}/LocalControls/ExclusionList_2019/MPsnvs_PLindels/ExclusionList_2019_HIPO-PCAWG_MP_PL_WGS.INDELs.AFgt1.vcf.gz'
    local_control_wes          ='${params.db_base_dir}/LocalControls/ExclusionList_2019/MPsnvs_PLindels/ExclusionList_2019_H021_MP_PL_WES.INDELs.AFgt1.vcf.gz'
    gnomad_genomes             ='${params.db_base_dir}/gnomAD/gnomad_v2.1/gnomad.genomes.r2.1.sites.SNV-INDEL.vcf.gz'
    gnomad_exomes              ='${params.db_base_dir}/gnomAD/gnomad_v2.1/gnomad.exomes.r2.1.sites.SNV-INDEL.vcf.gz'

    // Annovar files
    table_folder               ='/omics/odcf/reference_data/legacy/ngs_share/annovar/annovar_Feb2016/humandb/'
    annovar_path               ='/omics/odcf/reference_data/legacy/ngs_share/annovar/annovar_Feb2016'

    // INDEL reability files 
    repeat_masker              ='${params.db_base_dir}/UCSC/Sept2013/UCSC_27Sept2013_RepeatMasker.bed.gz'
    dac_blacklist              ='${params.db_base_dir}/UCSC/DACBlacklist_chr.bed.gz'
    duke_excluded              ='${params.db_base_dir}/UCSC/DukeExcluded_chr.bed.gz'
    hiseq_depth                ='${params.db_base_dir}/UCSC/HiSeqDepthTop10Pct_chr.bed.gz'
    self_chain                 ='${params.db_base_dir}/UCSC/selfChain_chr.bed.gz'
    mapability_file            ='${params.db_base_dir}/UCSC/wgEncodeCrgMapabilityAlign100mer_chr.bedGraph.gz'
    simple_tandemrepeats       ='${params.db_base_dir}/UCSC/repeats/SimpleTandemRepeats_chr.bed.gz'

    // Deep Annotation files
    enchancer_file             ='${params.db_base_dir}/UCSC/Enhancers_Vista_2011_01_14_chr.bed.gz'
    cpgislands_file            ='${params.db_base_dir}/UCSC/Sept2013/UCSC_27Sept2013_CpG_islands.bed.gz'
    tfbscons_file              ='${params.db_base_dir}/UCSC/tfbsConsSites_noncoding_merged_chr.bed.gz'
    encode_dnase_file          ='${params.db_base_dir}/UCSC/Sept2013/UCSC_27Sept2013_DNase_cluster_V2.bed.gz'
    mirnas_snornas_file        ='${params.db_base_dir}/miRNA/miRNA_snoRNAs_miRBaseRelease15_chr.bed.gz'
    mirbase_file               ='${params.db_base_dir}/miRNA/miRBase_version-18_chr.bed.gz'
    cosmic_file                ='${params.db_base_dir}/COSMIC/Cosmic_v77_hg19_coding_SNVs.bed.gz'
    mir_targets_file           ='${params.db_base_dir}/miRNA/miRNAsites_TargetScan_BartelLab_2011_01_14_chr.bed.gz'
    cgi_mountains_file         ='${params.db_base_dir}/../CustomDeepAnnotation/CgiMountains_chr.bed.gz'
    phastconselem_file         ='${params.db_base_dir}/UCSC/phastConsElem_min20bp_chr.bed.gz'
    encode_tfbs_file           ='${params.db_base_dir}/UCSC/Sept2013/UCSC_27Sept2013_wgEncodeRegTfbsClusteredV3.bed.gz'

    // TiNDA files
    chrlength_file             ='assets/chrlengths.plain.sorted.txt'
    genemodel_bed              ='${params.db_base_dir}/gencode/gencode19/GencodeV19_Exons_plain.bed.gz'
    exomecapturekit_bed        ='${params.db_base_dir}/../targetRegions/Agilent5withUTRs_plain.bed.gz'

    // References
//    genome                     = null
//    igenomes_base              = 's3://ngi-igenomes/igenomes'
//    igenomes_ignore            = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = 'results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/platypusindelcalling custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/platypusindelcalling.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/platypusindelcalling profiles: ${params.custom_config_base}/pipeline/platypusindelcalling.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }

    test              { includeConfig 'conf/test.config'              }
    dkfz_cluster      { includeConfig 'conf/dkfz_cluster.config'      }
    test_full         { includeConfig 'conf/test_full.config'         }
}

// Load igenomes.config if required
//if (!params.igenomes_ignore) {
//    includeConfig 'conf/igenomes.config'
//} else {
//    params.genomes = [:]
//}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/platypusindelcalling'
    author          = 'Kuebra Narci kuebra.narci@dkfz-heidelberg.de'
    homePage        = 'https://github.com/nf-core/platypusindelcalling'
    description     = 'ODCF Platypus based indel calling pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process.scratch=true
